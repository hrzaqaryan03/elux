

import React, { Children } from 'react'
import Select , {components} from 'react-select'
import style from './chooseService.module.scss'
import { services } from '../../serviceData'
import ServiceIcon from '../../sharedComponents/svg/Services';
import { useState } from 'react';
const ChooseService = () => {

  const [expandedGroup, setExpandedGroup] = useState(null);

  const groupedOptions = services.map((service) => ({
    label: service.name,
    options: service.subservices.map((subservice) => ({
      value: subservice.id,
      label: subservice.name,
    })),
    groupId: service.id,
  }));

  
  const handleChange = (selectedOption) => {
    console.log(selectedOption);
    
  }

  const handleGroupClick = (groupId) => {
    setExpandedGroup(expandedGroup === groupId ? null : groupId);
  };
  const customStyles = {
    control: () => ({ 
      width: '100%',
      maxWidth:"248px",
      display: 'flex',
      justifyContent:'space-beetwen',
      alignItems: 'center',
    }),
    menu: () => ({
     

    }),
    menuList: (provided) => ({
      ...provided,
      padding: 0,  
      scrollbarWidth: "none",
                        
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? "transparent" : "transparent",  
      color: "black",
                     
    }),
    dropdownIndicator: (base, state) => ({
      ...base,
      transition: 'transform 0.3s ease',
      transform: state.selectProps.menuIsOpen ? 'rotate(180deg)' : 'rotate(0deg)', 
    }),
  }


  return (

    <div className={style.chooseService}>
      <div className={style.chooseService__container}>
        <Select
          options={groupedOptions}
          onChange={handleChange}
          placeholder='Services'
          isSearchable={false}
          styles={customStyles}
          className={style.select}
          // menuIsOpen={true}
          components={{
            Control:({children , ...props}) => (
              <div>
                  <components.Control {...props} className={style.control}><ServiceIcon/>{children}</components.Control>
              </div>
            ),
            Menu:({children , ...props}) => (
              <div>
                <components.Menu {...props} className={style.menu}>{children}</components.Menu>
              </div>
            )
          }}
        >
        </Select>
      </div>
    </div>
  )
}

export default ChooseService





























































































































































// import React, { useRef, useState } from "react";
// import style from "./chooseService.module.scss";
// import { services } from "../../serviceData";

// const ChooseService = () => {
//   const [openList, setOpenList] = useState(false);
//   const [openGroup, setOpenGroup] = useState(Array.from(services).fill(false));
//   const [select, setSelect] = useState("Service");

//   const toggleOpenGroup = (index) => {
//     setOpenGroup((prev) => {
//       const newState = [...prev]
//       newState[index] = !newState[index]
//       return newState
//     });
    
//   };
//   const handleSelect = (el) => {
//     if(el.subservice) console.log('ok');
    
//   }
//   return (
//     <div className={style.chooseService}>
//       <div className={style.chooseService__container}>
//         <div className={style.chooseService_header}>
//           <div
//             className={style.button}
//             onClick={() => setOpenList((prev) => !prev)}
//           >
//             <div className={style.left}>
//               <span>
//                 <svg
//                   width="20"
//                   height="20"
//                   viewBox="0 0 20 20"
//                   fill="none"
//                   xmlns="http://www.w3.org/2000/svg"
//                 >
//                   <path
//                     d="M0.834336 1.03019C0.726002 1.2982 0.882484 1.45657 1.26767 1.45657C1.82138 1.45657 1.96582 1.56621 2.36305 2.27279C2.56768 2.63826 2.91675 3.04028 3.12139 3.17429C3.8075 3.60067 5.31214 3.40575 4.85473 2.94282C4.77047 2.85755 4.46954 2.79663 4.18065 2.79663C3.47046 2.79663 3.27787 2.66263 2.8325 1.88295C2.61583 1.5053 2.30286 1.12764 2.11027 1.03019C1.65286 0.79872 0.918596 0.786537 0.834336 1.03019Z"
//                     fill="#292929"
//                     stroke="#292929"
//                     strokeWidth="0.2"
//                   />
//                   <path
//                     d="M11.3791 1.28608C11.2828 1.32262 10.7532 1.57845 10.1994 1.84647C9.22444 2.33376 9.16425 2.34595 7.58739 2.41904C5.39664 2.52868 5.4809 2.44341 5.4809 4.69715C5.4809 6.93871 5.43275 6.8778 7.38276 6.99962C8.85129 7.0849 9.57351 7.26763 10.2957 7.73057C10.8735 8.09604 11.8846 8.4006 12.5346 8.4006C12.968 8.4006 13.0763 8.44933 13.2448 8.72952C13.3532 8.92444 14.268 10.5203 15.2791 12.299C17.3134 15.8684 17.3736 15.9415 18.1921 15.5395L18.6375 15.3324L18.5652 16.2826C18.4328 17.915 18.0236 18.7069 17.0967 19.0602C16.4106 19.3282 15.3513 19.2673 14.8939 18.914C13.955 18.2196 13.7865 17.1476 14.3282 15.4298C14.8217 13.8583 14.6652 12.7863 13.7745 11.7629C13.0041 10.8736 11.5476 10.5691 10.4643 11.0685C9.86241 11.3487 9.73 11.5315 9.9587 11.7751C10.1152 11.9335 10.1874 11.9213 10.5485 11.702C11.03 11.3975 12.0291 11.3609 12.6309 11.6167C13.4013 11.9335 14.0272 13.0299 14.0272 14.0167C14.0272 14.2481 13.8948 14.8573 13.7263 15.3811C12.8958 17.9881 13.9309 19.8521 16.1939 19.8521C18.1199 19.8521 19.2032 18.3536 19.2032 15.6613C19.2032 15.1862 19.2634 15.0156 19.5041 14.7842C20.0458 14.2725 19.9375 13.9314 18.4088 11.2635C17.6384 9.9234 16.8921 8.6077 16.7356 8.3275L16.4467 7.82802L17.5902 7.42601C19.2032 6.86561 19.2032 6.86561 19.2032 4.97734C19.2032 3.68601 19.1671 3.39363 18.9986 3.17435C18.8782 3.04034 17.9754 2.55305 16.9763 2.1023L15.1708 1.28608L13.3652 1.24953C12.3782 1.23735 11.4754 1.24953 11.3791 1.28608ZM14.3884 4.81897V7.81584L12.98 7.76711L11.5596 7.71838L10.4522 7.13363C9.36888 6.57324 9.28462 6.54887 7.80406 6.42705C6.94943 6.35395 6.19109 6.24431 6.11887 6.17122C6.01053 6.09812 5.96238 5.64738 5.96238 4.75806C5.96238 3.89311 6.01053 3.38145 6.11887 3.25962C6.2272 3.10125 6.58831 3.05252 7.77999 3.01598C9.20036 2.95506 9.34481 2.9307 10.1272 2.55305C11.4995 1.87083 11.6198 1.84647 13.0402 1.83428L14.3884 1.8221V4.81897ZM16.7717 2.68705C18.4208 3.418 18.9865 3.7591 18.3245 3.60073C18.1439 3.56418 17.7587 3.49109 17.4578 3.44236C16.9643 3.38145 16.9161 3.39363 16.9161 3.63728C16.9161 3.92966 16.9402 3.94184 17.9152 4.13676C18.3606 4.23422 18.6013 4.33168 18.6013 4.4535C18.6013 4.58751 18.4088 4.62405 17.7467 4.62405C16.9402 4.62405 16.9041 4.63624 16.9402 4.89207C16.9763 5.1479 17.0486 5.17226 17.7949 5.20881C18.806 5.25754 18.83 5.46464 17.831 5.67174C17.0606 5.83011 16.8439 5.9763 16.9643 6.26868C17.0124 6.41487 17.1208 6.45141 17.3134 6.40268C17.9032 6.23213 18.6013 6.1834 18.6013 6.29304C18.6013 6.36614 18.3726 6.50014 18.0958 6.60978C17.3736 6.8778 15.0985 7.66965 15.0384 7.66965C15.0143 7.66965 14.9902 6.37832 14.9902 4.80679C14.9902 3.23526 15.0143 1.94393 15.0504 1.94393C15.0865 1.94393 15.8569 2.27285 16.7717 2.68705ZM17.2171 10.3741C17.9513 11.6533 18.5532 12.7253 18.5652 12.7741C18.5893 12.835 17.0124 13.7609 16.868 13.7609C16.8319 13.7609 16.5189 13.2492 16.1578 12.6279C15.8087 12.0188 15.1226 10.8249 14.6532 9.99649C14.1717 9.16809 13.7865 8.47369 13.7865 8.44933C13.7865 8.42496 14.0152 8.4006 14.3041 8.38841C14.581 8.38841 15.0263 8.31532 15.2911 8.21786C15.556 8.13258 15.7967 8.05949 15.8328 8.04731C15.8689 8.04731 16.4949 9.09499 17.2171 10.3741ZM19.0828 13.6268C19.3236 14.102 19.2273 14.3091 18.493 14.7111C18.1078 14.9182 17.7347 15.1009 17.6504 15.1009C17.5782 15.1009 17.4458 14.9425 17.3374 14.7354C17.1328 14.3334 17.0606 14.4065 18.2402 13.7121C18.8902 13.3345 18.9143 13.3345 19.0828 13.6268Z"
//                     fill="#292929"
//                     stroke="#292929"
//                     strokeWidth="0.2"
//                   />
//                   <path
//                     d="M0.834336 2.61418C0.726002 2.88219 0.882484 3.04056 1.26767 3.04056C1.82138 3.04056 1.96582 3.1502 2.36305 3.85678C2.84453 4.70955 3.28991 4.98975 4.16861 4.98975C4.63806 4.98975 4.8788 4.94102 4.91491 4.81919C5.02325 4.55118 4.74639 4.38063 4.18065 4.38063C3.47046 4.38063 3.27787 4.24662 2.84453 3.47913C2.59175 3.05274 2.32694 2.76037 2.06212 2.62636C1.54452 2.38271 0.918596 2.37053 0.834336 2.61418Z"
//                     fill="#292929"
//                     stroke="#292929"
//                     strokeWidth="0.2"
//                   />
//                   <path
//                     d="M0.832851 4.19767C0.724517 4.47787 0.893036 4.62405 1.3023 4.62405C1.80786 4.62405 1.88008 4.68497 2.39767 5.50119C2.63842 5.89102 2.99953 6.29304 3.19212 6.3905C3.6375 6.62197 4.82917 6.63415 4.91343 6.40268C5.02176 6.13467 4.74491 5.96412 4.17917 5.96412C3.46898 5.96412 3.27638 5.83011 2.84305 5.06262C2.59027 4.63624 2.32545 4.34386 2.06064 4.20985C1.54304 3.9662 0.91711 3.95402 0.832851 4.19767Z"
//                     fill="#292929"
//                     stroke="#292929"
//                     strokeWidth="0.2"
//                   />
//                   <path
//                     d="M4.75885 8.32741C4.18107 8.53451 1.36438 10.2035 1.18383 10.4471C1.09957 10.5568 1.02734 10.7883 1.02734 10.9588C1.02734 11.2877 3.85606 16.4165 4.27736 16.8551C4.62644 17.2206 5.10792 17.1353 6.14311 16.5262C7.22645 15.8805 7.70794 15.8074 8.09312 16.2216C8.49035 16.6723 9.15239 17.7809 9.46535 18.5606C9.97091 19.8276 10.8015 20.2052 11.5117 19.4987C12.1857 18.8043 12.4024 19.2794 7.38294 10.4837C6.15515 8.32741 5.72181 7.97412 4.75885 8.32741ZM5.52922 8.87562C5.83015 8.99744 6.04682 9.36291 8.38201 13.4562C8.88757 14.3211 9.73017 15.8074 10.2718 16.7576C11.2589 18.4753 11.3793 18.8286 11.1144 19.0966C10.7533 19.4621 10.3802 19.1941 9.99499 18.2682C9.59776 17.3424 8.9598 16.2825 8.47831 15.7952C7.82831 15.1252 7.31071 15.1617 5.91441 15.9536C5.09589 16.4165 4.80699 16.5262 4.67459 16.4287C4.59033 16.3556 4.5181 16.246 4.5181 16.1851C4.5181 16.1241 5.05977 15.7587 5.72181 15.381C6.86534 14.711 7.14219 14.3942 6.80515 14.1871C6.73293 14.1384 6.11904 14.4308 5.42089 14.8328L4.16903 15.5638L3.98847 15.2957C3.81995 15.0277 3.84403 15.0034 5.01163 14.3211C5.86626 13.8217 6.2033 13.5537 6.2033 13.3831C6.2033 13.0176 5.91441 13.1029 4.69866 13.8095C3.7718 14.3455 3.5431 14.4308 3.42273 14.2968C3.19402 14.0288 3.33847 13.8704 4.45792 13.2247C5.49311 12.6156 5.81811 12.2501 5.457 12.1161C5.3607 12.0796 4.75885 12.3598 4.10884 12.7374C3.15791 13.2978 2.90513 13.3953 2.82087 13.2613C2.65235 12.9933 2.74865 12.8836 3.50699 12.4451C4.72273 11.7385 5.11996 11.4461 5.11996 11.2755C5.11996 10.9101 4.73477 11.0075 3.60328 11.6897C2.54402 12.3232 2.39957 12.3841 2.26717 12.2014C2.18291 12.0918 2.11068 11.9821 2.11068 11.9456C2.11068 11.909 2.58013 11.6045 3.16995 11.2755C4.42181 10.569 4.63848 10.3862 4.55422 10.1548C4.45792 9.87457 4.24125 9.94767 3.0255 10.6542C1.86994 11.3243 1.6292 11.3852 1.6292 10.971C1.6292 10.7883 3.15791 9.81366 4.75885 8.98526C5.24033 8.72943 5.15607 8.74161 5.52922 8.87562Z"
//                     fill="#292929"
//                     stroke="#292929"
//                     strokeWidth="0.2"
//                   />
//                 </svg>
//               </span>
//               <span>{select}</span>
//             </div>
//             <span className={style.right}>
//               <span className={style.icon}>
//                 <svg
//                   width="12"
//                   height="7"
//                   viewBox="0 0 12 7"
//                   fill="none"
//                   xmlns="http://www.w3.org/2000/svg"
//                 >
//                   <path
//                     d="M10.6953 5.60205L6.19531 1.10205L1.69531 5.60205"
//                     stroke="#667085"
//                     strokeWidth="1.66667"
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                   />
//                 </svg>
//               </span>
//               <span className={style.line}></span>
//             </span>
//           </div>
//           <div
//             className={
//               style.selectionBox + `${openList ? " " + style.open : ""}`
//             }
//           >
//             <ul className={style.serviceGroupList}>
//               {services.map((el, index) => {
//                 return (
//                   <li
//                     onClick={() => {
//                       handleSelect(el)
//                       setOpenList(false)
//                       toggleOpenGroup(index);
//                     }}
//                     className={style.serviceGroups + `${openGroup[index] == true ? " " + style.open : ""}`}
//                     key={el.id}
//                   >
//                     <span className={style.groupName}>{el.name}</span>
//                     {el.subservices ? (
//                       <ul className={style.subserviceList}>
//                         {el.subservices.map((el) => {
//                           return (
//                             <li className={style.subservice} key={el.id}>
//                               <span>{el.name}</span>
//                             </li>
//                           );
//                         })}
//                       </ul>
//                     ) : null}
//                   </li>
//                 );
//               })}
//             </ul>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ChooseService;
